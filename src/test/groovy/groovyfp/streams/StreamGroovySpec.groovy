package groovyfp.streams

import spock.lang.Specification
import groovy.stream.Stream

class StreamGroovySpec extends Specification {

    // tag::streams_4[]
    void 'Getting double values from even numbers of a given collection'() {
        when: 'Processing the stream'
            def result =
                Stream.
                    from(0..5). // <1>
                    filter { it % 2 == 0 }. // <2>
                    map { it * 10 }. // <3>
                    collect() // <4>
        then: 'We should get the expected results'
            result == [0, 20, 40]
    }
    // end::streams_4[]

    // tag::streams_5[]
    void 'Creating streams'() {
        when: 'building streams from collections and iterables'
            def stream1 = Stream.from({ x++ }).using(x: 1) // <1>
            def stream2 = Stream.from([1, 2, 3]) // <2>
            def stream3 = Stream.from(50..100) // <3>
            def stream4 = Stream.from(x: 0..2, y: 4..2) // <4>
        and: 'from an iterator instance'
            def x = 0
            def iterator = [hasNext: { true }, next: { x++ }] as Iterator
            def stream5 = Stream.from(iterator) // <5>
        and: 'also from another stream'
            def stream6 = Stream.from(stream1) // <6>
        then: 'values generated by the stream invocations'
            stream1.take(2).collect() == [1, 2]
            stream2.take(2).collect() == [1, 2]
            stream3.take(4).collect() == [50, 51, 52, 53]
            stream4.take(2).collect() == [[x:0, y:4], [x:0, y:3]]
        and: 'using until instead of take'
            stream5.until{ it > 3}.collect() == [0, 1, 2, 3]
            stream6.until{ it > 6}.collect() == [3, 4, 5, 6]
    }
    // end::streams_5[]

}
