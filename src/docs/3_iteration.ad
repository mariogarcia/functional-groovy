== Internal Vs External iteration 

Most of the time we need to iterate through a list, we end doing the same. We tend to specify every detail, we code
every step of the way. But is there any other way ? Well there is...it's call internal iteration.

The point here is that We should be taking care on the logic of filtering and transformation and not
how to loop through the collection, Don't you thing ?

There are some reasons I would recommend you to start using internal iteration:

* Is more concise and clear
* Reusability
* Internal optimizations 

=== More concise

Let's say we have a list of mercenaries in lower case and we want to get their names in upper case. Well
no problem...That is what is should look like in old-fashioned Java code: 

[source, groovy]
.External Iteration: Java style
----
include::{testDir}/groovyfp/exit/ExternalIterationIsEvilSpec.groovy[tags=external_iteration_1,indent=0] 
----

* We have to remember to create the collection to store the transformed names. 
* Then we should know how the iteration is done
* Finally to add explicitly every transformed name into the new collection.

Maybe Groovy is more concise and less verbose...hell yeah but you can do it wrong either.

[source, groovy]
.External Iteration: Groovy style 
----
include::{testDir}/groovyfp/exit/ExternalIterationIsEvilSpec.groovy[tags=external_iteration_2,indent=0] 
----

_"That's not what I signed for!!!"_ you may think. Don't worry Groovy has a lot more to offer. Collections
in Groovy have many useful method to loop through them filtering and collecting transformed values
without having to specify how a collection should be traversed.

[source, groovy]
.Internal Iteration: Groovy 
----
include::{testDir}/groovyfp/exit/ExternalIterationIsEvilSpec.groovy[tags=external_iteration_3,indent=0] 
----

This example shows how you can loop through a collection in Groovy in a declarative way. You can almost
read _"I want to collect the upper-case-version of the expendable collection"_ can't you ? 

Of course you can embed the closure expression as a parameter instead of declaring the expression and
then passing it to the collect method

[source, groovy]
.Internal Iteration: Groovy 
----
include::{testDir}/groovyfp/exit/ExternalIterationIsEvilSpec.groovy[tags=external_iteration_4,indent=0] 
----

But later on you'll see that sometimes is better not to use the Closure expression directly if you
want to keep your code reusable.

=== Reusability 

Imagine we had a method looping through a collection to sum all numbers less than 20.

[source, groovy]
.Internal Iteration: Groovy 
----
include::{testDir}/groovyfp/exit/ExternalIterationIsEvilSpec.groovy[tags=external_iteration_5,indent=0] 
----

Now we want to get all numbers from 20 to 100 

[source, groovy]
.Internal Iteration: Groovy 
----
include::{testDir}/groovyfp/exit/ExternalIterationIsEvilSpec.groovy[tags=external_iteration_6,indent=0] 
----

And now...you know what ? forget it :P

There should be a better way of refactoring this behavior. There are two main actions when trying to
solve these type of problems:

* Filtering data 
* Transforming data

And when talking about Groovy and collections this means to use *_find_* or *_findAll_* when trying
to filtering data and *_collect_* for transforming data.

Back to the prolem, while the transformation applied to the data is the same the filtering applied
is different. Lets see how our reusable method should look like:

[source, groovy]
.Internal Iteration: Filter + Transformation 
----
include::{testDir}/groovyfp/exit/ExternalIterationIsEvilSpec.groovy[tags=external_iteration_7,indent=0] 
----

<1> First we pass the collection we want to transform. We say transform deliberately, we don't want
to *_mutate_* the collection but to create a new one for applying a given action. This case to sum
all numbers of that new collection

<2> We want to get certain numbers to add them up. By default if no filter given then apply to all (*_{ it }_*).

<3> We're using Groovy's collection behavior to apply the given filter to get the new collection and
then sum all numbers in that collection.

And how to use it for different filters:

[source, groovy]
.Internal Iteration: Reuse of functions 
----
include::{testDir}/groovyfp/exit/ExternalIterationIsEvilSpec.groovy[tags=external_iteration_8,indent=0] 
----

That's great but the previous example shows us a way of reusing behavior through the use of methods.
But Does it mean it will be forcing us to create a method every time we would like to reuse a
certain behavior ? That would lead us to create a lot of methods don't you think ?

Functional programming teach us that behavior is not limited to *_methods_* of an object. When
talking about behavior we will be talking of *_functions_* in a more general way.

Functions are more powertful in the way that they can be modified, passed as a parameter to other
functions, and still can be used as the methods we normally use. In Groovy such type of functions
are called *_closures_*.

Although we will be talking about *_closures_* deeper in its own chapter lets say for now that
they're extremely useful to reuse behavior.

What if I want to use the same method with the same type of filter several times in the same
method. That would be a lot of boiler plate code. A lot of code to maintain and repeat. Sounds
too dirty... and looks worst :P

[source, groovy]
.Internal Iteration: Reusability limited to methods ? 
----
include::{testDir}/groovyfp/exit/ExternalIterationIsEvilSpec.groovy[tags=external_iteration_9,indent=0] 
----

What can I do ? Well let's say that Groovy methods could be transformed into *_closures_*... How ? 
As I said earlier *_functions_* / *_closures_* can be assigned and be passed as parameters.

[source, groovy]
.Internal Iteration: Reusability limited to methods ? 
----
include::{testDir}/groovyfp/exit/ExternalIterationIsEvilSpec.groovy[tags=external_iteration_10,indent=0] 
----

<1> We assign the closure representing the *_filter_* to a given variable
<2> Then we pass the closure as parameter to filter numbers 

And also I said *_methods_* in Groovy can be transformed to closures:

[source, groovy]
.Internal Iteration: Reusability limited to methods ? 
----
include::{testDir}/groovyfp/exit/ExternalIterationIsEvilSpec.groovy[tags=external_iteration_11,indent=0] 
----

<1> We are creating a new function with a fixed type of filter
<2> We have created a new function that sums all numbers greater than 20
and less than 200 for the collection passed as parameter

WARNING: If the expression *_this.&sum.rcurry_* sounds like chinese to you just take that this
expression is only saying: I want to get a new function with the first parameter from the right with
the following value *_{ it > 20 && it < 100}_*. Anyway I recommend you to review the chaper
dedicated to closures.

