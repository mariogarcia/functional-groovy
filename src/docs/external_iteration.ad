== Internal Vs External iteration 

Most of the time we need to iterate through a list we do the same. We tend to specify every detail, we code
every step of the way. But is there any other way ? Well there is...it's call internal iteration.

There are some reasons I would recommend you to start using internal iteration:

* Is more concise and clear
* Reusability
* Internal optimizations 

=== More concise

Let's say we have a list of mercenaries in lower case and we want to get their names in upper case. Well
no problem...That is what is should look like in old-fashioned Java code: 

[source, groovy]
.External Iteration: Java style
----
include::{testDir}/groovyfp/exit/ExternalIterationIsEvilSpec.groovy[tags=external_iteration_1,indent=0] 
----

* We have to remember to create the collection to store the transformed names. 
* Then we should know how the iteration is done
* Finally to add explicitly every transformed name into the new collection.

Maybe Groovy is more concise and less verbose...hell yeah but you can do it wrong either.

[source, groovy]
.External Iteration: Groovy style 
----
include::{testDir}/groovyfp/exit/ExternalIterationIsEvilSpec.groovy[tags=external_iteration_2,indent=0] 
----

_"That's not what I signed for!!!"_ you may think. Don't worry Groovy has a lot more to offer. Collections
in Groovy have many useful method to loop through them filtering and collecting transformed values
without having to specify how a collection should be traversed.

[source, groovy]
.Internal Iteration: Groovy 
----
include::{testDir}/groovyfp/exit/ExternalIterationIsEvilSpec.groovy[tags=external_iteration_3,indent=0] 
----

This example shows how you can loop through a collection in Groovy in a declarative way. You can almost
read _"I want to collect the upper-case-version of the expendable collection"_ can't you ? 

Of course you can embed the closure expression as a parameter instead of declaring the expression and
then passing it to the collect method

[source, groovy]
.Internal Iteration: Groovy 
----
include::{testDir}/groovyfp/exit/ExternalIterationIsEvilSpec.groovy[tags=external_iteration_4,indent=0] 
----

But later on you'll see that sometimes is better not to use the Closure expression directly if you
want to keep your code reusable.

=== Reusability 

Imagine we had a method looping through a collection to sum all numbers less than 20.

Now we want to get all numbers from 20 to 100 

And now...you know what ? forget it :P

We should have a collection capable to receive "behavior" and capable to apply that behavior to
that collection.

In groovy by default you can apply new behaviors to a collection...but imagine we always want
to get double of each filtered value:



