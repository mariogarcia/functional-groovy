== Closures 

=== Definition

Until I find a better definition, I came up with the following "informal" definition: 

""
A *_closure_* is a function which allows access to variables declared in its surrounding scope when
the closure was declared.

Normally this surrounding scope in Groovy means local variables and non-local variables inside its
upper lexical scopes up to class fields.
""

The minimal version of a closure could be:

[source, groovy]
.Declaring a closure
----
include::{testDir}/groovyfp/closures/ClosuresSpec.groovy[tags=closures1,indent=0] 
----

<1> A closure may have closure aguments
<2> A closure body may have statements
<3> A closure may have an implicit variable
<4> Closures always return a value (even though it could be void).

Closures can be declared in as class fields, static fields, and local variables.

NOTE: I've included the typed version because sometimes people forgot about the fact that a closure is a
function, and like any other function it could return something.

Lets review the principals of a closure:

[source, groovy]
.Using a closure
----
include::{testDir}/groovyfp/closures/ClosuresSpec.groovy[tags=closures2,indent=0] 
----

<1> A closure can access non-local variables available in upper lexical scopes when the closure was declared
<2> A closure can access local variables
<3> Has its own execution body
<4> Because it is a function, can be executed

Closures may reference variables external to their own definition. This includes local variables,
method parameters, and object instance members. However, a closure may only reference those
variables that the compiler can lexically deduce from the physical location of the closure
definition within the source file.  

IMPORTANT: It's very important to keep in mind that a closure "sees" those variables available when the closure
was declared, not when it's used. 

=== Getting started 

Closures are widely used in Groovy. One of the most common places are collections. In the
following example we want to get 2 times each element of the collection.

[source, groovy]
.Using closures in API
----
include::{testDir}/groovyfp/closures/ClosuresSpec.groovy[tags=closures3,indent=0] 
----

The collect method receives a parameter of type *_Closure_* that transforms every item in
the collection.

<1> Anonymous closure with implicit variable. In this case the variable refers to every
element in the collection.

You can also declare the closure and use it later as a parameter to another function.

[source, groovy]
.Using closures in API
----
include::{testDir}/groovyfp/closures/ClosuresSpec.groovy[tags=closures4,indent=0] 
----

<1> Declaring the closure
<2> Passing closures as parameters to other functions (closures or methods) 

=== Composition

Sometimes we end with a lot of functions used all over the code, but many
times used in different ways, orders...etc.

Imagine you have a problem and you only know there will be two numbers
as an input and the result will be decimal. Your boss tells you to 
add them up until he knows what the final calculation will be.

Well it's not that bad isn't it ? It is going to be a simple sum, lets
hardcode it and leave it alone.

[source, groovy]
.Harcoding solution which is likely to change
----
include::{testDir}/groovyfp/closures/ClosuresSpec.groovy[tags=closures5,indent=0] 
----

Now your boss comes again and gives you the whole formula: All numbers should be
multiplied 2 times and then be divided by 10 and eventually yes they should be
added up.

Ok, now you have to modify your code:

[source, groovy]
.Modifying your logic
----
include::{testDir}/groovyfp/closures/ClosuresSpec.groovy[tags=closures6,indent=0] 
----

You may be thinking the code is still legibible and there is nothing wrong to
keep it that way. Well I disagree. First of all you are looping the collection
twice, that could be a lot of numbers, be carefull with that. And the second ...
will see that later ;)

I'm going to compose first two functions to be applied only once per item before
adding up all numbers.

[source, groovy]
.Composing
----
include::{testDir}/groovyfp/closures/ClosuresSpec.groovy[tags=closures7,indent=0] 
----

<1> Declaring first part of the calculation
<2> Declaring second part of the calculation
<3> Combining both of them. Execution will be from left to right. First multiplication, 
then division
<4> Using the combined function per each item

Composition could be done from left to right or the other way around, it depends on the developer's
decision. But this has to change a little bit more. We still have our functions

[source, groovy]
.Composing
----
include::{testDir}/groovyfp/closures/ClosuresSpec.groovy[tags=closures8,indent=0] 
----

<1> I've moved functions that I will probably reuse to static methods. That way I can
combine them without harcode them in my methods
<2> In this method I describe the problem I've been dealing with. Applying a function
to a list of numbers that eventually are going to be added up.
<3> I'm using the composed function here
<4> At this point I'm able to reuse the basic functionality to apply any single or
combined function to it.

=== Currying

==== What is currying ? 

The term takes its name from the american mathematician Haskell Curry. A good formal definition
could be:

[,Wikipedia]
""
Currying is the technique of transforming a function that takes multiple arguments in such a way
that it can be called as a chain of functions each with a single argument.
""

_Currying_ is a special case of *_partial application_* which is:

[, Wikipedia]
""
In computer science, partial application (or partial function application) refers to the process of
fixing a number of arguments to a function, producing another function of smaller arity...
""

Why are both definitions important ? Well, although I've just showed you the formal definition of
both _currying_ and _partial application_ in Groovy we tend to use the term _currying_ most of the
time meaning partial applications. From now on I will using the formal definitions mentioned above.

==== Using curry, ncurry, rcurry

There are three specialized methods for the Closure type in order to produce 
partial applications of your closures.

The first one is *_curry_*. This method takes a var-arg parameter in order to set any number of
available closure parameters and return the partial application of it.

[source, groovy]
.curry(...)
----
include::{testDir}/groovyfp/closures/ClosuresSpec.groovy[tags=closures14,indent=0] 
----

<1> A function having 3 parameters
<2> We set the first parameter of the source function producing a new function with
two parameters
<3> This time we may want to set all parameters to pospone the execution of the function

Using *_curry(...)_* you can pass at most the same number of arguments of the source closure,
otherwise you will get an IllegalAgumentException. The parameters are set from left to right.

In case you wanted to produce partial applications of a given function applying fixed values
from right to left, then you should be using *_rcurry(...)_* method.

[source, groovy]
.rcurry(...)
----
include::{testDir}/groovyfp/closures/ClosuresSpec.groovy[tags=closures15,indent=0] 
----

*_rcurry_* may seem a little bit awkward because notice how parameters are passed
to _rcurry_. One may expect to keep inverse order from right to left, I mean...
if we had this function:

[source, groovy]
.rcurry(...) explanation
----
def myFunction = { String a, Integer b, Double c -> /*...*/ }
----

If we wanted to set two fixed parameters I may expect that rcurry should be applied like this:

[source, groovy]
.rcurry(...) wrong use 
----
// WRONG 
def myFunction2 = myFunction1.rcurry(22.2, 3) 
----

But instead _rcurry_ expects to kee the same order:

[source, groovy]
.rcurry(...) correct 
----
// CORRECT 
def myFunction2 = myFunction1.rcurry(3, 22.2) 
----

Last but not least. If you would like to produce a partial application of a given closure for any
parameter at any position you can use *_ncurry_*.

[source, groovy]
.ncurry(...)
----
include::{testDir}/groovyfp/closures/ClosuresSpec.groovy[tags=closures16,indent=0] 
----

<1> Here we want to set only the second parameter from the left hand side.

When using *_ncurry_* you just place the cursor at a given point and start setting
fixed parameters from left to right.

==== Combining closures 

The same way we wanted to compose functions to transform values, we may want to
do the same thing with filtering.

This time we will change perspective. Instead of applying composed filters I think it would be more
interesting how to aggregate filters in order to apply them, for example, to a collection.

Think about an SQL operation, we wouln't want the database engine to apply 
each filter for every row and aggregate the result from the previous execution, Would we?
That would be crazy ? So if the database engine doesn't do it, neither do I.

Our starting point is the less efective implementation where we're repeating our
loop per each filter

[source, groovy]
.Filtering several times
----
include::{testDir}/groovyfp/closures/ClosuresSpec.groovy[tags=closures9,indent=0] 
----

I can't combine both filters as I did with transformation in the previous chapter.  Because the
result of applying a filter is a boolean value. Than boolean value will be passed as the argument of
the next function in line, and it will fail because all our filters are expecting a number.

The strategy requires to apply a partial application of the function.  Let's show how to do it with
normal *_Xcurry_* methods. 

[source, groovy]
.Combining filters using rcurry 
----
include::{testDir}/groovyfp/closures/ClosuresSpec.groovy[tags=closures10,indent=0] 
----

<1> First we create a closure with two parameters. We need to add some filters. All filters should be executed for every number
<2> We need to use rcurry to set filters, because var-args arguments can only be the last parameter of a function
<3> Passing all filter we want to apply in order
<4> Filtering numbers

Now we will be applying all filters for every single item, just once. We made
our filtering process more efficient. Well done !!

It's true that sometimes it's a little bit verbose to use _Xcurry(...)_ methods but
it's also true that using that technique functions are more reusable.

Here there is another technique which consist of making functions return other functions. Eventually
is what _Xcurry(...)_ methods will do for you underneath, but sometimes may look clearer to the reader what
the partial application tries to do.

[source, groovy]
.Combining filters making a closure to return another closure
----
include::{testDir}/groovyfp/closures/ClosuresSpec.groovy[tags=closures11,indent=0] 
----

<1> In just one call we are using the behavior of closures to set the filters we will be
using without having to use any Xcurry function
<2> Passing all filter we want to apply in order
<3> Filtering numbers

Why can I do step number 1 ? Because the closure's *filter* value is set when the closure is
declared with the references at that time.  Afterwards those values won't change. Anyway I made sure
that couln't happen because I declare *_filters_* as a *_final_* parameter.

=== Delegation strategy

(TODO)

=== Memoization 

Although +memoization+ is normally used for recursive calculations... 
don't worry, this chapter doesn't start with "yet another Fibonacci example".

We'll get there, but I think is easier to think about +memoization+ as a form
of +caching+. A very simple one but caching nevertheless.

Imagine a very simple scenario. I would like a very simple cache to save
+n+ calls to...database/network/...etc and it's so simple I would waste my
time to use any fancy cache system.

In this first example, I'm simulating a way of getting users from a +UserService+
class with a method +findUserById+ returning users having the id passed as parameter.

Because I know memory is far more than the memory need to store all users in 
the given process, and because every call to that method really consumes a lot
of time, I've decided to +memoize+ it.

[source, groovy]
.Memoized method
----
include::{testDir}/groovyfp/closures/ClosuresSpec.groovy[tags=closures18,indent=0] 
----

In order to cache the method invocation I annotated the method with the annotation
+groovy.transform.Memoize+ which creates a new cache at instance level.  

[source, groovy]
.Memoized method
----
include::{testDir}/groovyfp/closures/ClosuresSpec.groovy[tags=closures17,indent=0] 
----


=== Trampoline 

When writing recursive code, sometimes we can overflow the size of the stack and get and
Stackoverflow exception. To prevent that situation, Groovy gives us two solutions:

* Closure's *_trampoline()_* method
* *_@TailRecursion_* AST transformation

A good example is to try to add up a list of numbers recursively.

[source, groovy]
.Recursion with trampoline()
----
include::{testDir}/groovyfp/closures/ClosuresSpec.groovy[tags=closures12,indent=0] 
----

<1> We need to declare sumRecursively and then attach its behabior to the actual variable
<2> Within the function every time we make a recursive call we must call to the "trampoline" 
version of the function
<3> Finally to init the whole process execute a "trampoline" version of the closure

It works ok but it seems a little bit complicated. Get a version with trampoline()
then not forget to call trampoline with arguments...mmmmm  

*_@TailRecursive_* transformation helps you to avoid dealing with that kind of details.
You just focus on the implementation and it handles how to make the function to a 
recursive one. This AST transformation is avaiable since version 2.3 of Groovy.

The only requirement here is to put the recursive call as the last expression in the 
method body (at the tail, that's why it's called tail recursion optimization).

[source, groovy]
.Recursion with @TailRecursive 
----
include::{testDir}/groovyfp/closures/ClosuresSpec.groovy[tags=closures13,indent=0] 
----

=== Functional interface coercion

(TODO)

