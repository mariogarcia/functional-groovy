== OOP Revisited 

Most of the time is hard to think in terms of functional programming because we are not used to do
it. I was born as an OOP programmer, and it's now when I've started digging into
functional programming.

So I guess that a friendly way of travelling to the functional land would be to pass through some of
the object-oriented places we've been working on for the past 20 years. Do you want to join me in
this trip ? Lets go!

I've followed the list of oop patterns discussed in the book "Functional Programming Patterns" by
Michael Bevilaqua-Linn.

Object oriented languages that doesn't have functions as first citizens have to make do with classes
and methods in order to be able to pass behavior to another classes or methods.

=== State

Closures have an important characteristic, which is they capture the "state" of the scope where they
were created.

IMHO the wrong way of thinking about this topic is the following example, which mutates
one of the references the closure is using.

[source, groovy]
.State (Wrong)
----
include::{testDir}/groovyfp/oop2fn/ObjectOrientedPatternsSpec.groovy[tags=oop2fn_4,indent=0] 
----

<1> We declare a given discount to apply to some prices.
<2> The scope is so wide there is the risk someone could mutate the state reference value 
<3> The worst happened. We mutated state and the result of calling the closure with the same
value changes. If you care about mutability, this is not good.

How can we pass state without mutating references used by our closure. I've changed the
example a little bit:

[source, groovy]
.State
----
include::{testDir}/groovyfp/oop2fn/ObjectOrientedPatternsSpec.groovy[tags=oop2fn_5,indent=0] 
----

<1> We declare the state at a given point
<2> We declare the closure, but notice that when the inner closure is created it only sees the
state when it was created nothing more.
<3> That's way when the state variable mutates the execution of the closure remains the same

=== Command

Command pattern normally wraps a certain behavior, and that behavior is passed to another function
or object to execute that behavior with the data found at the destination function or object.

Imagine I want to purchase online two tickets, and I can chose between paying the VIP tickets or the
regular ones. Depending on my choice the payment process will charge me differently.

[source, groovy]
.Object receiving command
----
include::{sourceDir}/groovyfp/oop2fn/PurchaseEntry.groovy[indent=0] 
----

The purchase order has the normal price of the purchase, and depending on the process applied, the
final amount could be changed.

[source, groovy]
.Contract of the command
----
include::{sourceDir}/groovyfp/oop2fn/PurchaseProcess.groovy[indent=0] 
----

All processes passed to the process entry, should comply to the PurchaseProcess interface. Remember
we can create a closure and coerce it to become a functional interface.

[source, groovy]
.Using command pattern
----
include::{testDir}/groovyfp/oop2fn/ObjectOrientedPatternsSpec.groovy[tags=oop2fn_6,indent=0] 
----

<1> Initializing the entry with the initial price
<2> Applying each of the processes to check different values
<3> Declaring each process and the expected prices after applying those processes to the entry

=== Immutable objects instead of Builder

Six years ago I remember creating builder objects in Java not only because I was preserving
immutability (I didn't care about it at that time) but also because using a builder with a fluent
API (using the chain pattern of course) was like using a DSL.

Nowadays with Groovy both of those "requirements" can be achieved by using the @Immutable
transformation and the fact that you can use maps when building new instances of an object.

We want to build and immutable object, or an object as immutable as it could be. Our object
carries information about a given video. Here is the Java-Style builder.

[source, groovy]
.Video 
----
include::{sourceDir}/groovyfp/oop2fn/Video.groovy[indent=0] 
----

In order to make Video object immutable (and not using @Immutable as we will see later on) I came
with this idea of forcing to create all possible constructors to be able to initialize class fields
using constructors and then overriding the setters.

I guess it would be easier if we could declare fields as private and Groovy would care about private
but so far it doesn't. So even if the field is private you can access to it.

NOTE: Even in Java through the Reflection API you can access to the value of a private field.

Next is the builder itself. It has a fluent API so if you use an IDE you will be please about
concatenating builder methods to initialize and build a new instance of Video class.

[source, groovy]
.Video Builder
----
include::{sourceDir}/groovyfp/oop2fn/VideoBuilder.groovy[indent=0] 
----

Finally both classes interact together in the following specification.

[source, groovy]
.Using builder
----
include::{testDir}/groovyfp/oop2fn/ObjectOrientedPatternsSpec.groovy[tags=oop2fn_7,indent=0] 
----

This is a lot of code right ? Since Groovy 1.7 *_@Immutable_* annotation is avaiable. This
annotation applies an AST transformation to make your classes almost immutable. To see the
particulars of what *_@Immutable_* can do for you, I'd recommend you to check the GroovyDoc, it's
very detailed.

[source, groovy]
.ImmutableVideo 
----
include::{sourceDir}/groovyfp/oop2fn/ImmutableVideo.groovy[indent=0] 
----

[source, groovy]
.Using @Immutable
----
include::{testDir}/groovyfp/oop2fn/ObjectOrientedPatternsSpec.groovy[tags=oop2fn_8,indent=0] 
----

The main difference between the Builder instance and the use of the @Immutable annotation is that
the use of the annotation will thrown an exception every time you try to access to any of the fields
of the anotated class, while the instance built with the builder will just ignore your attempts to
change the value of your fields.

Maybe there are more solutions to that problem, like a friend of mine says....pull-requests are
welcome :-)

=== Replacing Iterator

Most of the ideas about this topic have been already discussed in link:3_iteration.html[Internal vs External Iteration].

The only idea I want to touch here is *_sequence comprehensions_*.

Why comprehensions are so appealling. Have you ever tried to loop through two collections at a time
to get values combined ? I'm sure you have. How did it look like ? I bet it was pretty much like this:

[source, groovy]
.Looping hell
----
include::{testDir}/groovyfp/oop2fn/ObjectOrientedPatternsSpec.groovy[tags=oop2fn_9,indent=0] 
----

Unfortunately Groovy doesn't have comprehensions inbuilt in the language. But good news you have
some options. You can use *_Tim Yates'_* http://timyates.github.io/groovy-stream/[*_stream-groovy_*] library which have among others some
comprehensions implementation.

[source, groovy]
.stream-groovy comprehensions
----
include::{testDir}/groovyfp/oop2fn/ObjectOrientedPatternsSpec.groovy[tags=oop2fn_10,indent=0] 
----

=== Template pattern

The intent of the template pattern is to describe a process skeleton in an abstract class and let
subclasses to implement the behavior of some parts of the process.

The example we're using is an imaginary financial calculation. Imagine a bank that depending on its
clients applies a different values for some parts of the calculations...weird right ?

Apart from the details the process is always the same adding up the amount,
the applied taxes and then possible extra costs.

First lets see how it would look like using a classical object oriented approach.

[source, groovy]
.Abstract class
----
include::{sourceDir}/groovyfp/oop2fn/AbstractFinancialProcess.groovy[indent=0] 
----

For good clients the bank doesn't charge much:

[source, groovy]
.Soft financial calculation
----
include::{sourceDir}/groovyfp/oop2fn/FinancialProcessSoft.groovy[indent=0] 
----

For bad clients the picture doesn't look that well:

[source, groovy]
.Hard financial calculation
----
include::{sourceDir}/groovyfp/oop2fn/FinancialProcessHard.groovy[indent=0] 
----

And then of course testing the process with these two implementations:

[source, groovy]
.Template pattern object oriented approach
----
include::{testDir}/groovyfp/oop2fn/ObjectOrientedPatternsSpec.groovy[tags=oop2fn_11,indent=0] 
----

So how to turn this pattern to a functional style of programming ? 

Well the abstract class which represented the process could be translated to
a function (I meant a closure):

[source, groovy]
.Template now is a higher function
----
include::{testDir}/groovyfp/oop2fn/ObjectOrientedPatternsSpec.groovy[tags=oop2fn_12,indent=0] 
----

Then we can create functions to "fill" the implementation gaps of this process

[source, groovy]
.Specific details
----
include::{testDir}/groovyfp/oop2fn/ObjectOrientedPatternsSpec.groovy[tags=oop2fn_13,indent=0] 
----

Finally we use the functions to calculate the final amount:

[source, groovy]
.Using functional template pattern
----
include::{testDir}/groovyfp/oop2fn/ObjectOrientedPatternsSpec.groovy[tags=oop2fn_14,indent=0] 
----

Because we're using functions we can be more flexible about how to compose and reuse
different combinations of functions.

NOTE: By the way, in many of the examples variables are typed. This is intentional because I want
reader to know what the functions really return. Depending on the situation typing is really up to
you 

[source, groovy]
.Building a reusable function on the fly
----
include::{testDir}/groovyfp/oop2fn/ObjectOrientedPatternsSpec.groovy[tags=oop2fn_15,indent=0] 
----

=== Strategy

The intent of this pattern is to declare a process that uses an algoritm that can be implemented in
several ways

Lets say we are working in a video cassette company (an we're in the 90's :P). We belong to the
quality department and we want to filter those videos not passing minimal standard validation. But
the problem is that depending on the country the minimal validation changes.

[source, groovy]
.Different strategies
----
include::{testDir}/groovyfp/oop2fn/ObjectOrientedPatternsSpec.groovy[tags=oop2fn_16,indent=0] 
----

<1> The validation strategy is applied to the collection filter
<2> Because we want to use good functional practices we dont want anybody to alter the result list
<3> The first strategy will detect as invalid mp4 videos
<4> The second strategy will detect as invalid videos with size less than 700 bytes

[source, groovy]
.Strategy test
----
include::{testDir}/groovyfp/oop2fn/ObjectOrientedPatternsSpec.groovy[tags=oop2fn_17,indent=0] 
----

=== Fighting Null Object 

Null pointer exceptions are the plague of our era in computing programming. There are studies on how
many millions are wasted because of this problem.

Here I'm going to show you a couple solutions to tackle this problem:

* Groovy truth 
* Optional pattern

The problem of *_NullPointerException_* is not only the sad surprise of an exception during
runtime but also the amount of lines of code you have to spend to make your code *_"safe"_*. 
There is a lot of boilerplate code involved.

I will use a really simple example to try to show the problem and the possible solutions to it.

We have a method to get the number of letters of a given word. You can pass a String or
unfortunately a null value.

[source, groovy]
.Null
----
include::{testDir}/groovyfp/oop2fn/ObjectOrientedPatternsSpec.groovy[tags=oop2fn_18,indent=0] 
----

<1> The method calls to the lenght method of the value passed as parameter
<2> When the value of the variable passed as parameter is null the method will throw a NPE trying
to access a method from a null value.

Although using the Groovy *_safe_* operator (*_?_*) is not the one-for-all solution. It is 
a good starting point to avoid NPE problems.

[source, groovy]
.Groovy safe operator
----
include::{testDir}/groovyfp/oop2fn/ObjectOrientedPatternsSpec.groovy[tags=oop2fn_19,indent=0] 
----

<1> We mark the reference as safe. 
<2> When trying to access some methods, or fields from that object, Groovy wil check whether
the reference is null or not. In case it were null then the evaluation won't go any further and
the expression will return null.

The null value in Groovy is not the null of Java. It's backed by *_NullObject_*.

[source, groovy]
.Null is not what it seems
----
include::{testDir}/groovyfp/oop2fn/ObjectOrientedPatternsSpec.groovy[tags=oop2fn_20,indent=0] 
----

This object helps us to apply one of the principals of the Groovy truth. So whenever we had
a null reference we can use it as a boolean value, which of course always will evaluate to 
*_false_*. 

[source, groovy]
.Groovy truth
----
include::{testDir}/groovyfp/oop2fn/ObjectOrientedPatternsSpec.groovy[tags=oop2fn_20b,indent=0] 
----

[source, groovy]
.Null as boolean
----
include::{testDir}/groovyfp/oop2fn/ObjectOrientedPatternsSpec.groovy[tags=oop2fn_20b,indent=0] 
----

Ok, *_null_* is an instance of *_NullObject_*, so How this helps ? Well if you check out 
the list of methods NullObject has you will figure out some things. The most remarkable is
that you don't have to use safety when accessing collections.

[source, groovy]
.Collections are safe
----
include::{testDir}/groovyfp/oop2fn/ObjectOrientedPatternsSpec.groovy[tags=oop2fn_21,indent=0] 
----

This is because all instances of a *_GroovyObject_* have some methods by default (methods 
declared in *_DefaultGroovyMethods_* class) 

Unfortunately when dealing with plain pogos or primitive wrappers this functionality doesn't
help a lot. Imagine we were using the *_findAll_* or *_collect_* methods to avoid NPE... that
would be insane don't you think ? Or maybe not ?

[source, groovy]
.Plain objects are not easy to deal with
----
include::{testDir}/groovyfp/oop2fn/ObjectOrientedPatternsSpec.groovy[tags=oop2fn_20d,indent=0] 
----

In order not to end doing that kind of coding, Groovy has the *_elvis_* operator, which a way
of providing a default value.

[source, groovy]
.Elvis comes to the rescue
----
include::{testDir}/groovyfp/oop2fn/ObjectOrientedPatternsSpec.groovy[tags=oop2fn_22,indent=0] 
----

<1> In case the value is null use 'john doe' as value
<2> You can call safely to *_toUpperCase_* method

[source, groovy]
.Another elvis example
----
include::{testDir}/groovyfp/oop2fn/ObjectOrientedPatternsSpec.groovy[tags=oop2fn_23,indent=0] 
----

[source, groovy]
.Introducing Optional pattern
----
include::{testDir}/groovyfp/oop2fn/ObjectOrientedPatternsSpec.groovy[tags=oop2fn_24,indent=0] 
----
