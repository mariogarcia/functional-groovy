== The M-Word

=== Introduction

+Category Theory+ is a huge topic not related *per se* to programming, but 
nowadays is the basis of what functional programming has become today.

In this chapter I'll try to explain and give examples of some terms
taken from Category Theory and why they could be useful to us as programmers
in our daily work.

Many of the examples are based on +Haskell+ programming language. 
As a pure functional language is the best place if you want to learn
the basis of functional programming, and also because there aren't
much documentation out there other than Haskell. Here you have
my two cents :)

I'm aware that terms like +Functor+, +Monad+...etc seem to be something
strange, odd, difficult for most of the programmers born in the OOP era 
(including myself by the way).

I know it's difficult... bad news: it becomes harder along the way, good news
... there is no good news. I'm jocking good news is that the more you
learn about +Category Theory+ applied to functional programming the more
you understand how to use functional programming at work... but stop! 
it's about time... *LETS DO THIS* 


=== Functor

In +Category Theory+ a +Functor+ is a mapping between categories...WHaAaAAAaaTT?? O_o

A +Functor+ represents a container/wrapper of some sort, along with the ability 
to apply a function to elements wrapped in the container. 

Ok, so a +Functor+ is like a +container+, like a +box+. It contains a value. 
That value can be transformed by functions applied to the container,
not to the value directly.

The formal definition of a Functor in Haskell is:

[source, haskell]
.Functor definition
----
class Functor f where
    fmap :: (a -> b) -> f a -> f b
----

What does it mean ? Well it means that in order to build a new instance of a 
+Functor+ type the type should implement a +fmap+ method.

The +fmap+ method receives a function +(a -> b)+ which transforms an object
of type +a+ in another object of type +b+, it also receives a +Functor+ of type +a+ 
and finally returns a functor of type +b+.

How could we implement this ?

==== Example

[source, java]
.Functor (Java)
----
include::{sourceDirJava}/groovyfp/categories/Functor.java[indent=0] 
----

NOTE: Some of the interfaces or classes shown here are implemented in plain
Java(TM). I'm planning to migrate them to Groovy 2.3+ with +@CompileStatic+ any time
soon.

So basically a functor allows us to transform the contained value applying a function. 
There're some differences between the Java(TM) implementation and the Haskell one.

* +(a->b)+ becomes +Function<A,B>+
* +fa+ parameter will be the instance of the functor itself
* +fb+ becomes +Functor<B>+

Now imagine we had a function adding 3 to any number. In Haskell we would be seeing this:

[source,haskell]
.Haskell example
----
fmap (+3) (Just 1)
----

I'll try to reproduce the same behavior, this time with Groovy :) We will be following
these steps:

* We need a function receiving a number and returning a number +(a->b)+
* Then the functor will receive the function and will know how to unwrap the
value and after applying the function how to wrap it again.

==== Function (a->b)

A function represents a transformation applied to a given input, giving
a certain result.

We need a function adding 3 to any given number. Here is a simple java interface
defining a function:

[source,java]
.Function (Java)
----
include::{sourceDirJava}/groovyfp/categories/Function.java[indent=0] 
----

Because this interface is in fact a functional interface, it could be
substituted by a Closure expression. So instead of building a new class or
building a verbose inner class implementation we will be using a closure
to define a new implementation of the *Function* interface.

[source,groovy]
.Function<Integer,Integer>
----
include::{testDir}/groovyfp/categories/FunctionSpec.groovy[tags=function1,indent=0] 
----

NOTE: Be aware that because closures only declare the return type you should add 
the type to the closure parameter if you care about input type.

==== Functor<A>

Well now we need an instance of a functor of type *A*, pass to the functor
our previously created function and expect to receive a certain value with
a certain type.

[source,groovy]
.Functor<Integer>
----
include::{testDir}/groovyfp/categories/FunctorSpec.groovy[tags=functorspec1,indent=0] 
----

Ok but how +Maybe.Just+ gets something and transform it to another functor. Lets see
what the +fmap+ implementation does:

[source,java]
.Maybe Functor#fmap implementation
----
include::{sourceDirJava}/groovyfp/categories/Maybe.java[tags=functorspec2,indent=0]
----

First I'll try to describe which types are involved:

* +JUST+ is the value contained by the Maybe instance (which among other things is a functor).
* +<B>+ is the type of the function applied. Then
the Maybe implementation wraps that value into another instance of a functor
(this time another Just instance).

Basically here the +fmap+ method takes as an argument a function transforming
the contained value in the source functor and then wraps it again in another
functor instance. 

By the way, althought *fmap* is implemented in *Functor* in languages
like Haskell, you won't see *fmap* being invoked like "myObject.fmap(...)" but instead 
you will find something like *fmap(functor, function)*

In the source code you will see that there're several methods adding
some syntactic sugar to inner functors/applicative/monads methods mimicking the way
Haskell does it.

[source,groovy]
.Public API
----
include::{testDir}/groovyfp/categories/FunctorSpec.groovy[tags=publicapimethods,indent=0] 
----

[source,groovy]
.Functor<Integer>
----
include::{testDir}/groovyfp/categories/FunctorSpec.groovy[tags=functorspec3,indent=0] 
----

==== Plain Groovy 

Well under the hood many of the methods added to the Groovy API (api, gapi, gdk) resemble
monadic behaviors. For example there is the *with* method all Groovy objects have. Although
it could be seen more like a *bind* action (we'll cover it later on) we can create a lighter
version of *fmap* with this *with*.

[source,groovy]
.Groovy map
----
include::{testDir}/groovyfp/categories/FunctorSpec.groovy[tags=groovyfunctormockery,indent=0] 
----

As we'll see later on, many monadic estructures don't execute functions when they detect
something went wrong, or the type at a hand means nothing can be executed (a Maybe.Nothing , 
Either.Left value, or a Try.Failure values could be an example for that)

This *with* on steroids executes the closure (function) passed as parameter when
the value exists (and represents a Groovy truth of couse ;) ). Notice was achieved
by using the *safe* operator from Groovy (foo?.unsafeMethod()).

[source,groovy]
.Groovy map
----
include::{testDir}/groovyfp/categories/FunctorSpec.groovy[tags=groovyfunctor,indent=0] 
----

And I can't finish this section without talking about *collect*. 
http://groovy.codehaus.org/groovy-jdk/java/util/Collection.html#collect(groovy.lang.Closure)[*Collect*] 
is the closest version of fmap I can think about within Groovy. Collect transforms each item in a collection
into something else.

Same way our *map* method was safe so is *collect*.

[source,groovy]
.Groovy collect 
----
include::{testDir}/groovyfp/categories/FunctorSpec.groovy[tags=collect,indent=0] 
----

So... why don't we make a better world and use both ideas combined ?

[source,groovy]
.Groovy collect 
----
include::{testDir}/groovyfp/categories/FunctorSpec.groovy[tags=collectandmap,indent=0] 
----

=== Applicative Functor

Remember I was saying a +Functor+ is a container, a box if you like, containing
a simple value ? You can think about +Applicative+ like a +Functor+ containing
a +Function+. This time the +box+ contains a +Function+.

Why then the name of +Applicative+ ? I'm not quite sure, but
I think it came from the idea that a function *can be applied* 
to some other values.

In Haskell:

[source,haskell]
----
(<*>) :: Applicative f => f (a->b) -> (f a -> f b)
----

This time instead of containing a plain value the functor has a function. So
we can read the Haskell function as a function receiving an applicative +f (a->b)+ (a 
functor containing a function transforming from a to b) and returns the
transformation from a functor containing a to a functor containing b +(f a -> f b)+. 

==== Example

[source,java]
----
include::{sourceDirJava}/groovyfp/categories/Applicative.java[indent=0]
----

We have included in our Java(TM) version a way of accessing the inner value 
forcing any +Applicative+ to implement the +getValue()+ method.

NOTE: Instead of +getValue+ returning a raw value I've implemented +getTypedRef+ which
returns a wrapper having the raw instance.
I did it becauseI didn't found a solution to resolve the problem of having the ListMonad sharing
the same interface with Monads sharing single values and still respecting the
+fmap+, +fapply+ and +bind+ methods. I'm not perfect so I will be very happy if
someone gives me a better solution :)

But the  most important method is +fapply+ which in in charge of receiving another
applicative and use the value of that applicative and apply it to the inner value
of the instance of the source applicative.

Lets take a look to the implementation of the +fapply+ method in the 
+Maybe.Right+ class we can see how it works.

[source,java]
----
include::{sourceDirJava}/groovyfp/categories/Maybe.java[tags=fapply,indent=0]
----

How can we use it ?

In this example I'm using implementations of +Maybe+. This implementation is not 
only an +Applicative+ but a +Functor+ (which is implied) and a +Monad+. Instead
of creating object with +new+ operator every object has a static method to do it.

[source,groovy]
----
include::{testDir}/groovyfp/categories/MaybeSpec.groovy[tags=imports,indent=0]
----

This is the example:

[source,groovy]
----
include::{testDir}/groovyfp/categories/MaybeSpec.groovy[tags=fapplyspec,indent=0]
----

<1> The implementation of the +Maybe.Nothing+ +fapply+ method doesn't apply the 
function to the current instance and returns  an instance of +new Nothing(null)+
<2> The implementation of +the Maybe.Just+ +fapply+ method applies current value 
to the function contained within the +Applicative+ passed as parameter.

=== Monad

What is a Monad ?

While +Functor+ applied a function to a wrapped value, and an +Applicative+ 
applied a wrapped function to a wrapped value, a +Monad+ applies a function
to a wrapped value and returns a wrapped value.

Because +Monad+ is an +Applicative+ and an +Applicative+ is a +Functor+, likewise 
a +Monad+ has some inherit methods such as +fmap+ or  +fapply+. But the method
that makes a +Monad+ a +Monad+ is the +bind+ method (or +>>=+ which is its alias
in Haskell).

How does +bind+ looks like ? Like always , first step, Haskell syntax:

[source,haskell]
----
class Monad m where    
    (>>=) :: m a -> (a -> m b) -> m b
----

A bind method receives a wrapped value +m a+ then a function +(a -> m b)+ which
transforms the wrapped value to another wrapped value, and finally returns the
transformation result +m b+.

In my humble representation of a Monad type in Java(TM) I came up with the 
following code:

[source,java]
----
include::{sourceDirJava}/groovyfp/categories/Monad.java[indent=0]
----

==== Maybe

The +Maybe+ is normally used to avoid asking whether the value is null or it
can contain any value. That's why the +Maybe+ object has two children: 
+Maybe.Just+ and +Maybe.Nothing+. 

NOTE: In the JDK 8 you can find the +Optional+ type. Sometimes is also called
+Option+.

As we'll be seeing along this chapter is that monads like +Maybe+, +Either+ or
+ListMonad+ will allow to apply functions over the wrapped value, only if the
wrapped value is considered *valid*. Otherwise the wrapped value will be 
returned.

To see how to use +Maybe+ lets use it in a simple exercise:

""
Given a number, I want to divide it by half two times, and then if still
not decimal, multiplied by three.
""

Because all even numbers will become decimals as soon as I try to dividing them
by half I want to stop the process as soon as the process detects that number
is no longer eligible to success.

[source,groovy]
----
include::{testDir}/groovyfp/categories/MaybeSpec.groovy[tags=maybebind,indent=0]
----

<1> tries to divide, if not even returns nothing otherwise returns division result.
<2> tries again to divide the number under the same premises.
<3> If division ended successfully only then applies multiplication.

The nice thing about this plan is that if any of the previous steps ended with
a +Maybe.Nothing+ instance the process won't go any further.

In order to understand what happens underneath, why process doesn't continue, 
I would like to show you both implementation of +Maybe.Just+ and +Maybe.Nothing+.

While +Maybe.Just+ applies the function:

[source,java]
----
include::{sourceDirJava}/groovyfp/categories/Maybe.java[tags=justbind,indent=0]
----

+Maybe.Nothing+ like its name, *does nothing* but to return the current value :P

[source,java]
----
include::{sourceDirJava}/groovyfp/categories/Maybe.java[tags=nothingbind,indent=0]
----

Sometimes it would be useful to have an alternative when there's no value. That's
what the method +or+ does. It makes the monad to return the alternative value in
case there was no value. Otherwise the current value is returned.

[source,groovy]
----
include::{testDir}/groovyfp/categories/MaybeSpec.groovy[tags=maybeor1,indent=0]
----

It's pretty clear in the previous example, but it is even clearer when you do
something ( a transformation for example) with the current inner value.

[source,groovy]
----
include::{testDir}/groovyfp/categories/MaybeSpec.groovy[tags=maybeor2,indent=0]
----

==== Either

Either monad is also one of the classics. The +Either+ monad instance can 
represent correct or error.

As imperative programmer I'm used to choose between branches in my code using
conditional structures such as +if+. As Groovy programmer I've gone one step
further and I've met the +Groovy Truth+ that helps me a lot classifying
instances between those which could be seen as a false statement and those 
which can be taken as a true statement.

But what if we go beyond ? What if we had a type saying it could be right or
wrong depending on its own but still having content ?.

The following example tries to search certain type of people from a given list.
The search will stop once a person has been found with any of the given rules.

[source,java]
----
include::{testDir}/groovyfp/categories/EitherSpec.groovy[tags=eithermonadsearch,indent=0]
----

First of all, I need to apologise because in this example It seems I've used Either just
to do the opposite. This time think +Either.Left+ as something telling us to 
stop looking because we've found what we were looking for.

<1> +baseSearch+ is a function that returns another function. 
That inner function returns an +Either.Left+ instance with the result inside 
if the +search+ function passed as parameter succeeded. I want the function to
return +Either.Left+ because I know when an +Either.Left+ is returned no further
action is done. And because I've found what I was looking for, I don't want the
search to go any further.
<2> I've created three different functions valid to be used in an +fmap+ function. That
means they receive an unwrapped value but they will return a wrapped value.
<3> Given the source we will try to apply three types of search in order to find
someone. Because the rules of the monad, I know if the first search fails the
second will be triggered, and so on. In case any of them succeed the value will be
return immediately.

==== ListMonad

Collections in general are one of the most used data structures ever. 
Some languages use collections only as data structures and some others make 
them implement monadic semantics in order to be able to do things like
+list comprehensions+.

According to **Wikipedia** a +list comprehension+ is:

[,Wikipedia]
""
A list comprehension is a syntactic construct available in some programming 
languages for creating a list based on existing lists
""

I would add that implementations differ in which are capable of handling
streams and those which don't. 

First of all I'm would like to start with a basic finite example. Like we
did before, lets sneak a little bit on how *Haskell* does it ;)

(TODO)

==== Try

Nowadays JVM languages deal with exceptions using *try-catch* blocks. The
problem is that these constructions force programmers to build their code in
a certain way.

*Try* monad wraps the result of a given computation. That computation could 
either end on a desired value, having an instance of *Success*, 
or could throw an exception, having an instance of *Failure* instead. 

Like *Either*, composition has a special importance here, due to
the fact that when having a *Failure* instance all possible actions
applied over it will always return the same failure.

This first example tries to parse an invalid number and add one to it. 

[source,groovy]
.Parse a possible number
----
include::{testDir}/groovyfp/categories/TrySpec.groovy[tags=basic1,indent=0]
----

Here we can see both behaviors. 

<1> First of all the given function fails and
the instance returned is an instance of *Failure* we know that because only
*Failure* instances return *true* when calling to *isFailure()* method.
<2> Besides that we can also notice that using a failure instance to create 
further function composition will end returning the same failure, which is the
same as saying that no further function will ever succeed using that failure.

When having a *Failure* instance, the exception that caused it is also wrapped
within the instance, and you could whether get it to inspect it, or throw it
like any other exception.

[source,groovy]
.throwException
----
include::{testDir}/groovyfp/categories/TrySpec.groovy[tags=exception1,indent=0]
----

<1> You can get the wrapped exception
<2> Or throw the exception instead

Normally when having an exception we would like to react somehow. Sometimes
we may want to set, for example a default value in case something went wrong.

In our example I would like to get zero in case the number was not valid. 
Then I would like to add one to that given number.

[source,groovy]
.TryOrElse
----
include::{testDir}/groovyfp/categories/TrySpec.groovy[tags=tryorelse,indent=0]
----

<1> You can notice how we use *TryOrElse* to react when the main action
failed. Then the second action will be executed instead. I think this
is a very common scenario and this way of coding could be very useful
and descriptive.

Of course, if the alternative function fails the *TryOrElse* execution
will return a *Failure* instance anyway. So, the next question could be:
Is there any way of recovering from a failure instance once we've executed
both main and alternative actions ?

Well there is the *recover()* method. This method has two arguments the
possible *Failure* instance, and the *Success* instance to use instead.

[source,groovy]
.recover()
----
include::{testDir}/groovyfp/categories/TrySpec.groovy[tags=recover,indent=0]
----
