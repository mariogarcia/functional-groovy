== The M-Word

=== Functor

Generally speaking a +Functor+ is any type you can map a function over. A +Functor+ represents a
container/wrapper of some sort, along with the ability to apply a function to elements wrapped in
the container

==== Implementation

[source, groovy]
.Functor
----
include::{sourceDir}/groovyfp/categories/Functor.groovy[indent=0] 
----

[source, groovy]
.Functor implementation
----
include::{sourceDir}/groovyfp/categories/EitherFunctor.groovy[indent=0] 
----

[source, groovy]
.Using Either functor
----
include::{testDir}/groovyfp/categories/EitherFunctorSpec.groovy[tags=functor1, indent=0] 
----

[source, groovy]
.Using Either functor (cont.)
----
include::{testDir}/groovyfp/categories/EitherFunctorSpec.groovy[tags=functor2, indent=0] 
----

==== Laws 

* Mapping the identity function overy every item in a container has not effect

[source, groovy]
.First law
----
include::{testDir}/groovyfp/categories/EitherFunctorSpec.groovy[tags=functor3, indent=0] 
----

* Mapping a composition of two functions over every item in a container is
the same as first mapping one function, and then mapping the other.

[source, groovy]
.Second law
----
include::{testDir}/groovyfp/categories/EitherFunctorSpec.groovy[tags=functor4, indent=0] 
----

=== Applicative

[source, groovy]
.Applicative
----
include::{sourceDir}/groovyfp/categories/Applicative.groovy[indent=0] 
----


=== Monad

[source, groovy]
.Monad
----
include::{sourceDir}/groovyfp/categories/Monad.groovy[indent=0] 
----

[source, groovy]
.Either demo
----
include::{testDir}/groovyfp/categories/EitherSpec.groovy[tags=eithermonad1, indent=0] 
----



